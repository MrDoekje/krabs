/* eslint-disable */
export default async () => {
    const t = {
        ["./task/entities/task.entity.js"]: await import("./task/entities/task.entity.js"),
        ["./command/entities/command.entity.js"]: await import("./command/entities/command.entity.js"),
        ["./argument/entities/argument.entity.js"]: await import("./argument/entities/argument.entity.js"),
        ["./task/entities/task-command.entity.js"]: await import("./task/entities/task-command.entity.js"),
        ["./task/entities/task-result.entity.js"]: await import("./task/entities/task-result.entity.js"),
        ["./argument/dto/create-argument.dto.js"]: await import("./argument/dto/create-argument.dto.js"),
        ["./command/dto/create-command.dto.js"]: await import("./command/dto/create-command.dto.js"),
        ["./task/entities/task-run.entity.js"]: await import("./task/entities/task-run.entity.js")
    };
    return { "@nestjs/swagger": { "models": [[import("./task/entities/task-result.entity.js"), { "TaskResult": { id: { required: true, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, output: { required: true, type: () => String, nullable: true }, error: { required: true, type: () => String, nullable: true }, success: { required: true, type: () => Boolean }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./argument/entities/argument.entity.js"), { "Argument": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, required: { required: true, type: () => Boolean }, commands: { required: true, type: () => [t["./command/entities/command.entity.js"].Command] } } }], [import("./command/entities/command.entity.js"), { "Command": { id: { required: true, type: () => String }, wd: { required: true, type: () => String }, name: { required: true, type: () => String }, command: { required: true, type: () => String }, arguments: { required: true, type: () => [t["./argument/entities/argument.entity.js"].Argument] }, format: { required: true, type: () => String }, optional: { required: true, type: () => Boolean }, taskCommands: { required: true, type: () => [t["./task/entities/task-command.entity.js"].TaskCommand] } } }], [import("./task/entities/task-command.entity.js"), { "TaskCommand": { id: { required: true, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, command: { required: true, type: () => t["./command/entities/command.entity.js"].Command }, executionOrder: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./task/entities/task.entity.js"), { "Task": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, queued: { required: true, type: () => Boolean }, taskCommands: { required: true, type: () => [t["./task/entities/task-command.entity.js"].TaskCommand] }, results: { required: true, type: () => [t["./task/entities/task-result.entity.js"].TaskResult] }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./task/entities/task-run.entity.js"), { "TaskRun": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, commandArguments: { required: true, type: () => Object }, favorited: { required: true, type: () => Boolean }, usageCount: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./argument/dto/create-argument.dto.js"), { "CreateArgumentDto": { name: { required: true, type: () => String, description: "The name of the argument." }, required: { required: true, type: () => Boolean, description: "Indicates if the argument is required." } } }], [import("./command/dto/create-command.dto.js"), { "CreateCommandDto": { wd: { required: true, type: () => String, description: "The working directory for the command.\n@type {string}" }, name: { required: true, type: () => String, description: "The command to be executed, for now including arguments\n@type {string}" }, command: { required: true, type: () => String, description: "The command to be executed, for now including arguments\n@type {string}" }, optional: { required: false, type: () => Boolean, description: "Optional flag to indicate if the command is optional, if so it will not block the task on fail.\n@type {boolean}\n@default false" }, format: { required: true, type: () => String, description: "The format for the command arguments.\nThis is used to format the arguments when they are passed to the command.\n@type {string}\n@default '--{{name}}={{value}}'", default: "--{{name}}={{value}}" }, arguments: { required: false, type: () => [t["./argument/dto/create-argument.dto.js"].CreateArgumentDto], description: "The list of arguments for the command.\n@type {CreateArgumentDto[]}" } } }], [import("./task/dto/create-task.dto.js"), { "CreateTaskDto": { name: { required: true, type: () => String, description: "The name of the task.\n@type {string}" }, description: { required: false, type: () => String, description: "An optional description of the task.\n@type {string}" }, commands: { required: false, type: () => [t["./command/dto/create-command.dto.js"].CreateCommandDto], description: "The list of commands associated with the task\n@type {CommandDto[]}" } } }], [import("./executor/dto/command-result.dto.js"), { "CommandResultDto": { success: { required: true, type: () => Boolean, description: "Indicates whether the command executed successfully." }, output: { required: true, type: () => String, description: "The standard output produced by the command." }, error: { required: false, type: () => String, description: "The error output or message if the command failed." } } }], [import("./task/dto/execute-task-run.dto.js"), { "ExecuteTaskRunDto": { taskRunName: { required: true, type: () => String, description: "The name of the task run configuration to execute.\n@type {string}" }, queued: { required: false, type: () => Boolean, description: "Whether the task should be queued or executed immediately.\n@type {boolean}\n@default false", default: false } } }]], "controllers": [[import("./task/task.controller.js"), { "TaskController": { "create": { type: t["./task/entities/task.entity.js"].Task }, "execute": {}, "queue": {}, "getAllTaskRuns": { type: [t["./task/entities/task-run.entity.js"].TaskRun] }, "getFavoritedTaskRuns": { type: [t["./task/entities/task-run.entity.js"].TaskRun] }, "executeTaskRun": { type: Object }, "toggleTaskRunFavorite": { type: t["./task/entities/task-run.entity.js"].TaskRun } } }]] } };
};