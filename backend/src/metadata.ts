/* eslint-disable */
export default async () => {
    const t = {
        ["./task/entities/task.entity.js"]: await import("./task/entities/task.entity.js"),
        ["./command/entities/command.entity.js"]: await import("./command/entities/command.entity.js"),
        ["./argument/entities/argument.entity.js"]: await import("./argument/entities/argument.entity.js"),
        ["./task/task-command/entities/task-command.entity.js"]: await import("./task/task-command/entities/task-command.entity.js"),
        ["./task/task-result/entities/task-result.entity.js"]: await import("./task/task-result/entities/task-result.entity.js"),
        ["./argument/dto/create-argument.dto.js"]: await import("./argument/dto/create-argument.dto.js"),
        ["./command/dto/create-command.dto.js"]: await import("./command/dto/create-command.dto.js"),
        ["./task/task-run/entities/task-run.entity.js"]: await import("./task/task-run/entities/task-run.entity.js")
    };
    return { "@nestjs/swagger": { "models": [[import("./task/task-result/entities/task-result.entity.js"), { "TaskResult": { id: { required: true, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, output: { required: true, type: () => String, nullable: true }, error: { required: true, type: () => String, nullable: true }, success: { required: true, type: () => Boolean }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./argument/entities/argument.entity.js"), { "Argument": { id: { required: true, type: () => Number }, name: { required: true, type: () => String }, required: { required: true, type: () => Boolean }, commands: { required: true, type: () => [t["./command/entities/command.entity.js"].Command] } } }], [import("./command/entities/command.entity.js"), { "Command": { id: { required: true, type: () => String }, wd: { required: true, type: () => String }, name: { required: true, type: () => String }, command: { required: true, type: () => String }, arguments: { required: true, type: () => [t["./argument/entities/argument.entity.js"].Argument] }, format: { required: true, type: () => String }, optional: { required: true, type: () => Boolean }, taskCommands: { required: true, type: () => [t["./task/task-command/entities/task-command.entity.js"].TaskCommand] } } }], [import("./task/task-command/entities/task-command.entity.js"), { "TaskCommand": { id: { required: true, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, command: { required: true, type: () => t["./command/entities/command.entity.js"].Command }, executionOrder: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./task/entities/task.entity.js"), { "Task": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, queued: { required: true, type: () => Boolean }, taskCommands: { required: true, type: () => [t["./task/task-command/entities/task-command.entity.js"].TaskCommand] }, results: { required: true, type: () => [t["./task/task-result/entities/task-result.entity.js"].TaskResult] }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./argument/dto/create-argument.dto.js"), { "CreateArgumentDto": { name: { required: true, type: () => String, description: "The name of the argument." }, required: { required: true, type: () => Boolean, description: "Indicates if the argument is required." }, commandId: { required: false, type: () => String, description: "The ID of the command this argument belongs to (optional)." } } }], [import("./command/dto/create-command.dto.js"), { "CreateCommandDto": { wd: { required: true, type: () => String, description: "The working directory for the command.\n@type {string}" }, name: { required: true, type: () => String, description: "The command to be executed, for now including arguments\n@type {string}" }, command: { required: true, type: () => String, description: "The command to be executed, for now including arguments\n@type {string}" }, optional: { required: false, type: () => Boolean, description: "Optional flag to indicate if the command is optional, if so it will not block the task on fail.\n@type {boolean}\n@default false" }, format: { required: true, type: () => String, description: "The format for the command arguments.\nThis is used to format the arguments when they are passed to the command.\n@type {string}\n@default '--{{name}}={{value}}'", default: "--{{name}}={{value}}" }, arguments: { required: false, type: () => [t["./argument/dto/create-argument.dto.js"].CreateArgumentDto], description: "The list of arguments for the command.\n@type {CreateArgumentDto[]}" }, taskId: { required: false, type: () => String, description: "Optional task ID to associate the command with a specific task.\n@type {string}" } } }], [import("./task/dto/create-task.dto.js"), { "CreateTaskDto": { name: { required: true, type: () => String, description: "The name of the task.\n@type {string}" }, description: { required: false, type: () => String, description: "An optional description of the task.\n@type {string}" }, commands: { required: false, type: () => [t["./command/dto/create-command.dto.js"].CreateCommandDto], description: "The list of commands associated with the task\n@type {CommandDto[]}" } } }], [import("./command/dto/command-result.dto.js"), { "CommandResultDto": { success: { required: true, type: () => Boolean, description: "Indicates whether the command executed successfully." }, output: { required: true, type: () => String, description: "The standard output produced by the command." }, error: { required: false, type: () => String, description: "The error output or message if the command failed." } } }], [import("./task/task-run/entities/task-run.entity.js"), { "TaskRun": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, description: { required: false, type: () => String }, task: { required: true, type: () => t["./task/entities/task.entity.js"].Task }, commandArguments: { required: true, type: () => Object }, favorited: { required: true, type: () => Boolean }, usageCount: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./task/dto/update-task.dto.js"), { "UpdateTaskDto": { commands: { required: false, type: () => [t["./command/entities/command.entity.js"].Command], description: "The list of commands associated with the task\n@type {CommandDto[]}" } } }], [import("./task/dto/execute-tasks.dto.js"), { "ExecuteTaskDto": { commandArguments: { required: false, type: () => Object, description: "Arguments per named command (per named argument)" } } }], [import("./task/dto/queue-task.dto.js"), { "QueueTaskDto": { priority: { required: false, type: () => Number, description: "Arguments per named command (per named argument)" } } }], [import("./command/dto/update-command.dto.js"), { "UpdateCommandDto": { arguments: { required: false, type: () => [t["./argument/entities/argument.entity.js"].Argument], description: "The list of arguments for the command.\n@type {Argument[]}" } } }], [import("./task/dto/execute-task-run.dto.js"), { "ExecuteTaskRunDto": { queued: { required: false, type: () => Boolean, description: "Whether the task should be queued or executed immediately.\n@type {boolean}\n@default false", default: false } } }], [import("./argument/dto/update-argument.dto.js"), { "UpdateArgumentDto": {} }]], "controllers": [[import("./task/task.controller.js"), { "TaskController": { "create": { type: t["./task/entities/task.entity.js"].Task }, "update": { type: t["./task/entities/task.entity.js"].Task }, "execute": {}, "queue": {}, "findAll": { type: [t["./task/entities/task.entity.js"].Task] }, "findByName": { type: t["./task/entities/task.entity.js"].Task } } }], [import("./command/command.controller.js"), { "CommandController": { "findOne": { type: t["./command/entities/command.entity.js"].Command }, "create": { type: t["./command/entities/command.entity.js"].Command }, "update": { type: t["./command/entities/command.entity.js"].Command } } }], [import("./task/task-result/task-result.controller.js"), { "TaskResultController": { "getResultsByTaskName": { summary: "Get task results by task name", type: [t["./task/task-result/entities/task-result.entity.js"].TaskResult] } } }], [import("./task/task-run/task-run.controller.js"), { "TaskRunController": { "getAll": { type: [t["./task/task-run/entities/task-run.entity.js"].TaskRun] }, "findFavorited": { type: [t["./task/task-run/entities/task-run.entity.js"].TaskRun] }, "execute": { type: Object }, "toggleFavorite": { type: t["./task/task-run/entities/task-run.entity.js"].TaskRun } } }], [import("./argument/argument.controller.js"), { "ArgumentController": { "create": { type: t["./argument/entities/argument.entity.js"].Argument }, "update": { type: t["./argument/entities/argument.entity.js"].Argument }, "remove": {} } }], [import("./activity/activity.controller.js"), { "ActivityController": { "getAllActiveTasks": { type: [t["./task/task-run/entities/task-run.entity.js"].TaskRun] }, "stopTask": {} } }]] } };
};