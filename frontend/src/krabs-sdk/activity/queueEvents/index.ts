/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueueEventsGetResponse}
 */
// @ts-ignore
export function createQueueEventsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueueEventsGetResponse;
}
/**
 * The deserialization information for the current model
 * @param QueueEventsGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueueEventsGetResponse(queueEventsGetResponse: Partial<QueueEventsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface QueueEventsGetResponse extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /activity/queue-events
 */
export interface QueueEventsRequestBuilder extends BaseRequestBuilder<QueueEventsRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<QueueEventsGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<QueueEventsGetResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param QueueEventsGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueueEventsGetResponse(writer: SerializationWriter, queueEventsGetResponse: Partial<QueueEventsGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!queueEventsGetResponse || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(queueEventsGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const QueueEventsRequestBuilderUriTemplate = "{+baseurl}/activity/queue-events";
/**
 * Metadata for all the requests in the request builder.
 */
export const QueueEventsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: QueueEventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createQueueEventsGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
