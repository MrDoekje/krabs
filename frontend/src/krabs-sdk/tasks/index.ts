/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTaskFromDiscriminatorValue, serializeCreateTaskDto, type CreateTaskDto, type Task } from '../models/index.js';
// @ts-ignore
import { type WithNameItemRequestBuilder, WithNameItemRequestBuilderNavigationMetadata, WithNameItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /tasks
 */
export interface TasksRequestBuilder extends BaseRequestBuilder<TasksRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.tasks.item collection
     * @param name Task name
     * @returns {WithNameItemRequestBuilder}
     */
     byName(name: string) : WithNameItemRequestBuilder;
    /**
     * Get all tasks
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Task[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Task[] | undefined>;
    /**
     * Create a new task
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     post(body: CreateTaskDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get all tasks
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Create a new task
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateTaskDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TasksRequestBuilderUriTemplate = "{+baseurl}/tasks";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TasksRequestBuilderNavigationMetadata: Record<Exclude<keyof TasksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byName: {
        requestsMetadata: WithNameItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithNameItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["name"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TasksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createTaskFromDiscriminatorValue,
    },
    post: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateTaskDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
