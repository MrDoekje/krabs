/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTaskFromDiscriminatorValue, serializeTask, serializeUpdateTaskDto, type Task, type UpdateTaskDto } from '../../models/index.js';
// @ts-ignore
import { ExecuteRequestBuilderRequestsMetadata, type ExecuteRequestBuilder } from './execute/index.js';
// @ts-ignore
import { QueueRequestBuilderRequestsMetadata, type QueueRequestBuilder } from './queue/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /tasks/{id}
 */
export interface TasksItemRequestBuilder extends BaseRequestBuilder<TasksItemRequestBuilder> {
    /**
     * The execute property
     */
    get execute(): ExecuteRequestBuilder;
    /**
     * The queue property
     */
    get queue(): QueueRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Task>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Task | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Task>}
     */
     put(body: UpdateTaskDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Task | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateTaskDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TasksItemRequestBuilderUriTemplate = "{+baseurl}/tasks/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TasksItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TasksItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    execute: {
        requestsMetadata: ExecuteRequestBuilderRequestsMetadata,
    },
    queue: {
        requestsMetadata: QueueRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TasksItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TasksItemRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: TasksItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createTaskFromDiscriminatorValue,
    },
    put: {
        uriTemplate: TasksItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createTaskFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateTaskDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
