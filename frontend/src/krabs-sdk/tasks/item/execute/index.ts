/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExecutePostRequestBody_commandArguments}
 */
// @ts-ignore
export function createExecutePostRequestBody_commandArgumentsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExecutePostRequestBody_commandArguments;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExecutePostRequestBody}
 */
// @ts-ignore
export function createExecutePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExecutePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ExecutePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExecutePostRequestBody(executePostRequestBody: Partial<ExecutePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "commandArguments": n => { executePostRequestBody.commandArguments = n.getObjectValue<ExecutePostRequestBody_commandArguments>(createExecutePostRequestBody_commandArgumentsFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ExecutePostRequestBody_commandArguments The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExecutePostRequestBody_commandArguments(executePostRequestBody_commandArguments: Partial<ExecutePostRequestBody_commandArguments> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface ExecutePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The commandArguments property
     */
    commandArguments?: ExecutePostRequestBody_commandArguments | null;
}
export interface ExecutePostRequestBody_commandArguments extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /tasks/{name}/execute
 */
export interface ExecuteRequestBuilder extends BaseRequestBuilder<ExecuteRequestBuilder> {
    /**
     * Execute a task by name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(body: ExecutePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Execute a task by name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ExecutePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param ExecutePostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExecutePostRequestBody(writer: SerializationWriter, executePostRequestBody: Partial<ExecutePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!executePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ExecutePostRequestBody_commandArguments>("commandArguments", executePostRequestBody.commandArguments, serializeExecutePostRequestBody_commandArguments);
    writer.writeAdditionalData(executePostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param ExecutePostRequestBody_commandArguments The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExecutePostRequestBody_commandArguments(writer: SerializationWriter, executePostRequestBody_commandArguments: Partial<ExecutePostRequestBody_commandArguments> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!executePostRequestBody_commandArguments || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(executePostRequestBody_commandArguments.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ExecuteRequestBuilderUriTemplate = "{+baseurl}/tasks/{name}/execute";
/**
 * Metadata for all the requests in the request builder.
 */
export const ExecuteRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ExecuteRequestBuilderUriTemplate,
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeExecutePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
