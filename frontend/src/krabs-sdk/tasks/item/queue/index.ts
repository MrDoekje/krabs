/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueuePostRequestBody_commandArguments}
 */
// @ts-ignore
export function createQueuePostRequestBody_commandArgumentsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueuePostRequestBody_commandArguments;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {QueuePostRequestBody}
 */
// @ts-ignore
export function createQueuePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoQueuePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param QueuePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueuePostRequestBody(queuePostRequestBody: Partial<QueuePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "commandArguments": n => { queuePostRequestBody.commandArguments = n.getObjectValue<QueuePostRequestBody_commandArguments>(createQueuePostRequestBody_commandArgumentsFromDiscriminatorValue); },
        "priority": n => { queuePostRequestBody.priority = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param QueuePostRequestBody_commandArguments The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoQueuePostRequestBody_commandArguments(queuePostRequestBody_commandArguments: Partial<QueuePostRequestBody_commandArguments> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface QueuePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The commandArguments property
     */
    commandArguments?: QueuePostRequestBody_commandArguments | null;
    /**
     * The priority property
     */
    priority?: number | null;
}
export interface QueuePostRequestBody_commandArguments extends AdditionalDataHolder, Parsable {
}
/**
 * Builds and executes requests for operations under /tasks/{id}/queue
 */
export interface QueueRequestBuilder extends BaseRequestBuilder<QueueRequestBuilder> {
    /**
     * Queue a task by name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     post(body: QueuePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Queue a task by name
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: QueuePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param QueuePostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueuePostRequestBody(writer: SerializationWriter, queuePostRequestBody: Partial<QueuePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!queuePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<QueuePostRequestBody_commandArguments>("commandArguments", queuePostRequestBody.commandArguments, serializeQueuePostRequestBody_commandArguments);
    writer.writeNumberValue("priority", queuePostRequestBody.priority);
    writer.writeAdditionalData(queuePostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param QueuePostRequestBody_commandArguments The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeQueuePostRequestBody_commandArguments(writer: SerializationWriter, queuePostRequestBody_commandArguments: Partial<QueuePostRequestBody_commandArguments> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!queuePostRequestBody_commandArguments || isSerializingDerivedType) { return; }
    writer.writeAdditionalData(queuePostRequestBody_commandArguments.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const QueueRequestBuilderUriTemplate = "{+baseurl}/tasks/{id}/queue";
/**
 * Metadata for all the requests in the request builder.
 */
export const QueueRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: QueueRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeQueuePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
