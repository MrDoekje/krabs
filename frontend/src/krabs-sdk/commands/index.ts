/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCommandFromDiscriminatorValue, serializeCommand, serializeCreateCommandDto, type Command, type CreateCommandDto } from '../models/index.js';
// @ts-ignore
import { CommandsItemRequestBuilderRequestsMetadata, type CommandsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /commands
 */
export interface CommandsRequestBuilder extends BaseRequestBuilder<CommandsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.commands.item collection
     * @param id Unique identifier of the item
     * @returns {CommandsItemRequestBuilder}
     */
     byId(id: string) : CommandsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Command[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Command[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Command>}
     */
     post(body: CreateCommandDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Command | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateCommandDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CommandsRequestBuilderUriTemplate = "{+baseurl}/commands";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CommandsRequestBuilderNavigationMetadata: Record<Exclude<keyof CommandsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: CommandsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CommandsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CommandsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createCommandFromDiscriminatorValue,
    },
    post: {
        uriTemplate: CommandsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createCommandFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateCommandDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
