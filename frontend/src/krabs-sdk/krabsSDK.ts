/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { ActivityRequestBuilderNavigationMetadata, type ActivityRequestBuilder } from './activity/index.js';
// @ts-ignore
import { ArgumentsRequestBuilderNavigationMetadata, ArgumentsRequestBuilderRequestsMetadata, type ArgumentsRequestBuilder } from './arguments/index.js';
// @ts-ignore
import { CommandsRequestBuilderNavigationMetadata, CommandsRequestBuilderRequestsMetadata, type CommandsRequestBuilder } from './commands/index.js';
// @ts-ignore
import { TaskRequestBuilderNavigationMetadata, type TaskRequestBuilder } from './task/index.js';
// @ts-ignore
import { TaskResultRequestBuilderNavigationMetadata, type TaskResultRequestBuilder } from './taskResult/index.js';
// @ts-ignore
import { TasksRequestBuilderNavigationMetadata, TasksRequestBuilderRequestsMetadata, type TasksRequestBuilder } from './tasks/index.js';
// @ts-ignore
import { apiClientProxifier, ParseNodeFactoryRegistry, SerializationWriterFactoryRegistry, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type RequestAdapter } from '@microsoft/kiota-abstractions';
// @ts-ignore
import { FormParseNodeFactory, FormSerializationWriterFactory } from '@microsoft/kiota-serialization-form';
// @ts-ignore
import { JsonParseNodeFactory, JsonSerializationWriterFactory } from '@microsoft/kiota-serialization-json';
// @ts-ignore
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
// @ts-ignore
import { TextParseNodeFactory, TextSerializationWriterFactory } from '@microsoft/kiota-serialization-text';

/**
 * Instantiates a new {@link KrabsSDK} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createKrabsSDK(requestAdapter: RequestAdapter) {
    if (requestAdapter === undefined) {
        throw new Error("requestAdapter cannot be undefined");
    }
    const serializationWriterFactory = requestAdapter.getSerializationWriterFactory() as SerializationWriterFactoryRegistry;
    const parseNodeFactoryRegistry = requestAdapter.getParseNodeFactory() as ParseNodeFactoryRegistry;
    const backingStoreFactory = requestAdapter.getBackingStoreFactory();
    
    if (parseNodeFactoryRegistry.registerDefaultDeserializer) {
        parseNodeFactoryRegistry.registerDefaultDeserializer(JsonParseNodeFactory, backingStoreFactory);
        parseNodeFactoryRegistry.registerDefaultDeserializer(TextParseNodeFactory, backingStoreFactory);
        parseNodeFactoryRegistry.registerDefaultDeserializer(FormParseNodeFactory, backingStoreFactory);
    }
    
    if (serializationWriterFactory.registerDefaultSerializer) {
        serializationWriterFactory.registerDefaultSerializer(JsonSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(TextSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(FormSerializationWriterFactory);
        serializationWriterFactory.registerDefaultSerializer(MultipartSerializationWriterFactory);
    }
    
    if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === null || requestAdapter.baseUrl === "") {
        requestAdapter.baseUrl = "http://localhost:3042";
    }
    const pathParameters: Record<string, unknown> = {
        "baseurl": requestAdapter.baseUrl,
    };
    return apiClientProxifier<KrabsSDK>(requestAdapter, pathParameters, KrabsSDKNavigationMetadata, undefined);
}
/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export interface KrabsSDK extends BaseRequestBuilder<KrabsSDK> {
    /**
     * The activity property
     */
    get activity(): ActivityRequestBuilder;
    /**
     * The arguments property
     */
    get arguments(): ArgumentsRequestBuilder;
    /**
     * The commands property
     */
    get commands(): CommandsRequestBuilder;
    /**
     * The task property
     */
    get task(): TaskRequestBuilder;
    /**
     * The taskResult property
     */
    get taskResult(): TaskResultRequestBuilder;
    /**
     * The tasks property
     */
    get tasks(): TasksRequestBuilder;
}
/**
 * Uri template for the request builder.
 */
export const KrabsSDKUriTemplate = "{+baseurl}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KrabsSDKNavigationMetadata: Record<Exclude<keyof KrabsSDK, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    activity: {
        navigationMetadata: ActivityRequestBuilderNavigationMetadata,
    },
    arguments: {
        requestsMetadata: ArgumentsRequestBuilderRequestsMetadata,
        navigationMetadata: ArgumentsRequestBuilderNavigationMetadata,
    },
    commands: {
        requestsMetadata: CommandsRequestBuilderRequestsMetadata,
        navigationMetadata: CommandsRequestBuilderNavigationMetadata,
    },
    task: {
        navigationMetadata: TaskRequestBuilderNavigationMetadata,
    },
    taskResult: {
        navigationMetadata: TaskResultRequestBuilderNavigationMetadata,
    },
    tasks: {
        requestsMetadata: TasksRequestBuilderRequestsMetadata,
        navigationMetadata: TasksRequestBuilderNavigationMetadata,
    },
};
/* tslint:enable */
/* eslint-enable */
